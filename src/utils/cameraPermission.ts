/**
 * Utilit√°rios para gerenciamento de permiss√µes de c√¢mera e microfone
 */

export interface CameraPermissionResult {
  success: boolean;
  error?: string;
  errorType?: 'permission_denied' | 'not_found' | 'in_use' | 'overconstrained' | 'unknown';
  stream?: MediaStream;
}

/**
 * Testa se c√¢mera e microfone est√£o acess√≠veis
 */
export async function testCameraAccess(): Promise<CameraPermissionResult> {
  try {
    console.log("üé• [CameraPermission] Solicitando acesso √† c√¢mera e microfone...");
    
    const stream = await navigator.mediaDevices.getUserMedia({
      video: true,
      audio: true
    });

    console.log("‚úÖ [CameraPermission] Acesso concedido com sucesso!");
    
    return {
      success: true,
      stream
    };
  } catch (err: any) {
    console.error("‚ùå [CameraPermission] Erro ao acessar m√≠dia:", err);
    
    let error = "Erro ao acessar c√¢mera";
    let errorType: CameraPermissionResult['errorType'] = 'unknown';

    if (err.name === 'NotAllowedError' || err.name === 'PermissionDeniedError') {
      error = "Permiss√£o negada. Clique no √≠cone de cadeado na barra de endere√ßo e permita o acesso √† c√¢mera.";
      errorType = 'permission_denied';
    } else if (err.name === 'NotFoundError' || err.name === 'DevicesNotFoundError') {
      error = "Nenhuma c√¢mera ou microfone encontrado neste dispositivo.";
      errorType = 'not_found';
    } else if (err.name === 'NotReadableError' || err.name === 'TrackStartError') {
      error = "C√¢mera ou microfone est√° sendo usado por outro aplicativo. Feche outros programas e tente novamente.";
      errorType = 'in_use';
    } else if (err.name === 'OverconstrainedError' || err.name === 'ConstraintNotSatisfiedError') {
      error = "Sua c√¢mera n√£o suporta as configura√ß√µes solicitadas.";
      errorType = 'overconstrained';
    } else if (err.name === 'TypeError') {
      error = "Seu navegador n√£o suporta acesso a c√¢mera. Use Chrome, Firefox, Safari ou Edge.";
      errorType = 'unknown';
    } else if (err.name === 'SecurityError') {
      error = "Acesso bloqueado por seguran√ßa. Certifique-se de estar usando HTTPS.";
      errorType = 'permission_denied';
    }

    return {
      success: false,
      error,
      errorType
    };
  }
}

/**
 * Para um stream de m√≠dia ativo
 */
export function stopMediaStream(stream: MediaStream | null): void {
  if (!stream) return;
  
  console.log("üõë [CameraPermission] Parando stream de m√≠dia...");
  
  stream.getTracks().forEach(track => {
    track.stop();
    console.log(`  ‚îî‚îÄ Track parado: ${track.kind} (${track.label})`);
  });
}

/**
 * Verifica o status da permiss√£o de c√¢mera (sem solicitar acesso)
 */
export async function checkCameraPermissionStatus(): Promise<'granted' | 'denied' | 'prompt' | 'unsupported'> {
  try {
    if (!navigator.permissions) {
      console.warn("‚ö†Ô∏è [CameraPermission] API de permiss√µes n√£o suportada");
      return 'unsupported';
    }

    const cameraPermission = await navigator.permissions.query({ name: 'camera' as PermissionName });
    console.log(`üìπ [CameraPermission] Status da permiss√£o de c√¢mera: ${cameraPermission.state}`);
    
    return cameraPermission.state as 'granted' | 'denied' | 'prompt';
  } catch (error) {
    console.error("‚ùå [CameraPermission] Erro ao verificar permiss√£o:", error);
    return 'unsupported';
  }
}

/**
 * Verifica se o navegador suporta getUserMedia
 */
export function isCameraSupported(): boolean {
  const supported = !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia);
  
  if (!supported) {
    console.error("‚ùå [CameraPermission] getUserMedia n√£o √© suportado neste navegador");
  }
  
  return supported;
}

/**
 * Retorna informa√ß√µes √∫teis sobre o ambiente para debugging
 */
export function getCameraDebugInfo(): {
  supported: boolean;
  isSecureContext: boolean;
  userAgent: string;
  platform: string;
} {
  return {
    supported: isCameraSupported(),
    isSecureContext: window.isSecureContext,
    userAgent: navigator.userAgent,
    platform: navigator.platform
  };
}
